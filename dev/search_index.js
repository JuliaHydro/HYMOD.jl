var documenterSearchIndex = {"docs":
[{"location":"api/#Hymod.jl-API","page":"API","title":"Hymod.jl API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"randomparams","category":"page"},{"location":"api/#Hymod.randomparams","page":"API","title":"Hymod.randomparams","text":"randomparams()\n\nFunction to create a random set of parameters as kwargs for Hymod.simulate()\n\n\n\n\n\n","category":"function"},{"location":"api/","page":"API","title":"API","text":"hargreaves","category":"page"},{"location":"api/#Hymod.hargreaves","page":"API","title":"Hymod.hargreaves","text":"hargreaves(forcings::DataFrame; tmincol::Symbol = :tmin, tmaxcol::Symbol = :tmax, dtcol::Symbol = :datetime)\n\nFunction to calculate PET using Hargreves equation.\n\n\n\n\n\nhargreaves(tmin::AbstractArray, tmax::AbstractArray, dts::AbstractArray)\n\nFunction to calculate PET using Hargreves equation.\n\n\n\n\n\nhargreaves(tmin::Real, tmax::Real, dts::Date)\n\nFunction to calculate PET using Hargreves equation.\n\n\n\n\n\n","category":"function"},{"location":"api/","page":"API","title":"API","text":"simulate","category":"page"},{"location":"api/#Hymod.simulate","page":"API","title":"Hymod.simulate","text":"simulate(forcings::DataFrame; precipcol::Symbol = :precip, petcol::Symbol = :pet, kwargs...)\n\nFunction to simulate discharge using Hymod rainfall-runoff model.\n\n\n\n\n\nsimulate(precip::AbstractArray, pet::AbstractArray; initflow::Bool = true, cmax::Float64 = 1.0, bexp::Float64 = 0.0, alpha::Float64 = 0.2, ks::Float64 = 0.01, kq::Float64 = 0.5)\n\nFunction to simulate discharge using Hymod rainfall-runoff model\n\n\n\n\n\n","category":"function"},{"location":"api/","page":"API","title":"API","text":"calibrate","category":"page"},{"location":"api/#Hymod.calibrate","page":"API","title":"Hymod.calibrate","text":"calibrate(forcing::DataFrame, paramspace::Dict, nsamples::Int64; precipcol::Symbol = :precip, petcol::Symbol = :pet, obscol::Symbol = :obs, savefinal::Bool = false)\n\nFunction to calibrate Hymod rainfall-runoff model\n\n\n\n\n\n","category":"function"},{"location":"api/","page":"API","title":"API","text":"Hymod.nse","category":"page"},{"location":"api/#Hymod.nse","page":"API","title":"Hymod.nse","text":"nse(y_true::AbstractArray, y_pred::AbstractArray)\n\nFunction to calculate Nash-Sutcliffe model efficiency coefficient\n\n\n\n\n\n","category":"function"},{"location":"api/","page":"API","title":"API","text":"Hymod.linearreservoir","category":"page"},{"location":"api/#Hymod.linearreservoir","page":"API","title":"Hymod.linearreservoir","text":"randomparams(xslow::Float64, inflow::Float64, Rs::Float64)\n\nLinear reservoir routing function\n\n\n\n\n\n","category":"function"},{"location":"#Hymod.jl","page":"Home","title":"Hymod.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Hymod model implementation in Julia","category":"page"},{"location":"","page":"Home","title":"Home","text":"Simple package with functionality to calibrate/simulate river discharge with the Hymod model.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The Hymod package is available through the Julia package system and can be installed using the following commands:.","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using Pkg\njulia> Pkg.add(\"Hymod\")","category":"page"},{"location":"#Example-use","page":"Home","title":"Example use","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using HTTP, CSV, DataFrames, Hymod\n\n# define url to test data\ntestDataUrl = \"https://raw.githubusercontent.com/JuliaHydro/Hymod.jl/master/test/data/test_forcings.csv\"\n# get response\nresponse = HTTP.get(testDataUrl)\n\n# read response as a DataFrame\ndf = CSV.File(response.body) |> DataFrame\n\n# create a column in the data frame for potential evapotranspiration\ndf[!,:pet] = hargreaves(df,tmincol=:tmin,tmaxcol=:tmax,dtcol=:date)\n\n# get a random set of parameters\npars = randomparams()\n\n# run a simulation\nq = simulate(df,precipcol=:precip, petcol=:pet; pars...)","category":"page"},{"location":"#Calibrating-a-model","page":"Home","title":"Calibrating a model","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using Dates\n\n# define dates to calibrate\ncalstart = Date(1986,1,1)\ncalend = Date(2001,12,31)\n\n# filter dataframe between start and end calibration times\ncaldf = filter(row -> row[:date] >= calstart && row[:date] <= calend, df)\n\n# get a dictionary of parameter ranges\nparamspace = Dict(\n    :cmax => Dict(:lower => 1.0, :upper => 100),\n    :bexp => Dict(:lower => 0.0, :upper => 2.0),\n    :alpha => Dict(:lower => 0.2, :upper => 0.99),\n    :ks => Dict(:lower => 0.01, :upper => 0.5),\n    :kq => Dict(:lower => 0.5, :upper => 1.2)\n)\n\n# set number of iterations to run calibration\nniterations = 5000\n\n# run calibration\ncalq, calpars, calloss = calibrate(caldf,paramspace,niterations)\n\n# get the remainder of dataframe to test calibrated parameters\ntestdf = filter(row -> row[:date] > calend, df)\n# run simulation with calibrated parameters\ntestdf[!,:q] = simulate(testdf,precipcol=:precip, petcol=:pet; calpars...)\n","category":"page"},{"location":"","page":"Home","title":"Home","text":"When you plot the simulated results compared to observed values, you should get a plot similar to one below.","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: )","category":"page"},{"location":"#Interactive-Examples","page":"Home","title":"Interactive Examples","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A Docker image is provided for users that want to run a contained installation of the Hymod model interactively in the browser using Pluto notebooks. To start the Pluto server with Hymod, run the following command in your terminal:","category":"page"},{"location":"","page":"Home","title":"Home","text":"$ docker run --rm -v julia -e 'import Pluto; Pluto.run()' -p 1234:1234 kmarkert/julia-hymod:latest","category":"page"},{"location":"","page":"Home","title":"Home","text":"Next, paste the following URL into the \"Open from file\" prompt: https://github.com/KMarkert/Hymod.jl/blob/master/examples/hymodinteractiveparameters.jl","category":"page"}]
}
